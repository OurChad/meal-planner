# import * from './generated/prisma.graphql' 

type Mutation {
    signup(email: String!, password: String!, name: String!): User!
    signin(email: String!, password: String!): User!
    signout: SuccessMessage
    requestReset(email: String!): SuccessMessage
    resetPassword(resetToken: String!, password: String!, confirmPassword: String!): User!
    updatePermissions(permissions: [Permission], userId: ID!): User
    createFood(food: FoodInput): Food
    updateFood(id: ID!, name: String!, subName: String, types: [FoodType!]!, image: String): Food
    deleteFood(id: ID!): Food
    createIngredient(foodId: ID!, quantity: Float!): Ingredient!
    updateIngredient(id: ID!, foodId: ID!, quantity: Float!): Ingredient    
    deleteIngredient(id: ID!): Ingredient
    createRecipe(name: String!, ingredients: [IngredientCreateManyInput!]!, instructions: String): Recipe!
    updateRecipe(id: ID!, name: String!, ingredients: IngredientUpdateManyInput!, instructions: String): Recipe!
    deleteRecipe(id: ID!): Recipe
    createMealPlan(data: MealPlanCreateInput!): MealPlan!
}

type Query {
    me: User
    users: [User]!
    food(id: ID!): Food
    foods(where: FoodWhereInput, orderBy: FoodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Food]!
    foodsConnection(where: FoodWhereInput, orderBy: FoodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FoodConnection!
    ingredients(where: IngredientWhereInput, orderBy: IngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ingredient]!
    ingredientsConnection(where: IngredientWhereInput, orderBy: IngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IngredientConnection!
    recipe(where: RecipeWhereUniqueInput!): Recipe
    recipes(where: RecipeWhereInput, orderBy: RecipeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Recipe]!
}

type User{
  id: ID!
  name: String!
  email: String!
  permissions: [Permission!]!
}

type SuccessMessage {
  message: String
}

type Food {
    id: ID!
    name: String!
    subName: String
    types: [FoodType!]!
    image: String
}

input FoodInput {
  name: String!
  subName: String
  types: [FoodType!]!
  image: String
}

type Ingredient {
    id: ID!
  food: Food!
  quantity: Float!
}

input IngredientUpdateManyInput {
    create: [IngredientCreateInput!],
    connect: [IngredientWhereUniqueInput!],
    update: [IngredientUpdateInput!],    
    delete: [IngredientWhereUniqueInput!],
}

input IngredientCreateInput {
    foodId: ID!
    quantity: Float!
}

input IngredientUpdateInput {
    id: ID!
    foodId: ID!
    quantity: Float!
}

type Recipe {
  id: ID!
  name: String!
  ingredients: [Ingredient!]!
  instructions: String
}