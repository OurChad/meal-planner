# source: https://eu1.prisma.sh/ismisechad-d18815/meal-planner/dev
# timestamp: Sat Jun 06 2020 13:15:53 GMT+0100 (Irish Standard Time)

type AggregateFood {
  count: Int!
}

type AggregateGroup {
  count: Int!
}

type AggregateIngredient {
  count: Int!
}

type AggregateMealDay {
  count: Int!
}

type AggregateMealPlan {
  count: Int!
}

type AggregateRecipe {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

type Food implements Node {
  id: ID!
  name: String!
  subName: String
  searchName: String
  types: [FoodType!]!
  image: String
}

"""A connection to a list of items."""
type FoodConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FoodEdge]!
  aggregate: AggregateFood!
}

input FoodCreateInput {
  id: ID
  name: String!
  subName: String
  searchName: String
  image: String
  types: FoodCreatetypesInput
}

input FoodCreateOneInput {
  create: FoodCreateInput
  connect: FoodWhereUniqueInput
}

input FoodCreatetypesInput {
  set: [FoodType!]
}

"""An edge in a connection."""
type FoodEdge {
  """The item at the end of the edge."""
  node: Food!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FoodOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  subName_ASC
  subName_DESC
  searchName_ASC
  searchName_DESC
  image_ASC
  image_DESC
}

type FoodPreviousValues {
  id: ID!
  name: String!
  subName: String
  searchName: String
  types: [FoodType!]!
  image: String
}

type FoodSubscriptionPayload {
  mutation: MutationType!
  node: Food
  updatedFields: [String!]
  previousValues: FoodPreviousValues
}

input FoodSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FoodSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FoodSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FoodSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FoodWhereInput
}

enum FoodType {
  BAKED
  BREAD
  CHEESE
  CONDIMENT
  DAIRY
  DRINK
  FRUIT
  GRAIN
  MEAT
  NUT
  OTHER
  PASTA
  SNACK
  SWEET
  TEA
  VEGETABLE
}

input FoodUpdateDataInput {
  name: String
  subName: String
  searchName: String
  image: String
  types: FoodUpdatetypesInput
}

input FoodUpdateInput {
  name: String
  subName: String
  searchName: String
  image: String
  types: FoodUpdatetypesInput
}

input FoodUpdateManyMutationInput {
  name: String
  subName: String
  searchName: String
  image: String
  types: FoodUpdatetypesInput
}

input FoodUpdateOneRequiredInput {
  create: FoodCreateInput
  connect: FoodWhereUniqueInput
  update: FoodUpdateDataInput
  upsert: FoodUpsertNestedInput
}

input FoodUpdatetypesInput {
  set: [FoodType!]
}

input FoodUpsertNestedInput {
  update: FoodUpdateDataInput!
  create: FoodCreateInput!
}

input FoodWhereInput {
  """Logical AND on all given filters."""
  AND: [FoodWhereInput!]

  """Logical OR on all given filters."""
  OR: [FoodWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FoodWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  subName: String

  """All values that are not equal to given value."""
  subName_not: String

  """All values that are contained in given list."""
  subName_in: [String!]

  """All values that are not contained in given list."""
  subName_not_in: [String!]

  """All values less than the given value."""
  subName_lt: String

  """All values less than or equal the given value."""
  subName_lte: String

  """All values greater than the given value."""
  subName_gt: String

  """All values greater than or equal the given value."""
  subName_gte: String

  """All values containing the given string."""
  subName_contains: String

  """All values not containing the given string."""
  subName_not_contains: String

  """All values starting with the given string."""
  subName_starts_with: String

  """All values not starting with the given string."""
  subName_not_starts_with: String

  """All values ending with the given string."""
  subName_ends_with: String

  """All values not ending with the given string."""
  subName_not_ends_with: String
  searchName: String

  """All values that are not equal to given value."""
  searchName_not: String

  """All values that are contained in given list."""
  searchName_in: [String!]

  """All values that are not contained in given list."""
  searchName_not_in: [String!]

  """All values less than the given value."""
  searchName_lt: String

  """All values less than or equal the given value."""
  searchName_lte: String

  """All values greater than the given value."""
  searchName_gt: String

  """All values greater than or equal the given value."""
  searchName_gte: String

  """All values containing the given string."""
  searchName_contains: String

  """All values not containing the given string."""
  searchName_not_contains: String

  """All values starting with the given string."""
  searchName_starts_with: String

  """All values not starting with the given string."""
  searchName_not_starts_with: String

  """All values ending with the given string."""
  searchName_ends_with: String

  """All values not ending with the given string."""
  searchName_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
}

input FoodWhereUniqueInput {
  id: ID
}

type Group implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  creator: User!
  owner: User!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  isPrivate: Boolean
  mealPlans(where: MealPlanWhereInput, orderBy: MealPlanOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MealPlan!]
}

"""A connection to a list of items."""
type GroupConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GroupEdge]!
  aggregate: AggregateGroup!
}

input GroupCreateInput {
  id: ID
  name: String!
  isPrivate: Boolean
  creator: UserCreateOneWithoutCreatedGroupsInput!
  owner: UserCreateOneWithoutOwnedGroupsInput!
  users: UserCreateManyWithoutGroupInput
  mealPlans: MealPlanCreateManyWithoutGroupInput
}

input GroupCreateManyWithoutCreatorInput {
  create: [GroupCreateWithoutCreatorInput!]
  connect: [GroupWhereUniqueInput!]
}

input GroupCreateManyWithoutOwnerInput {
  create: [GroupCreateWithoutOwnerInput!]
  connect: [GroupWhereUniqueInput!]
}

input GroupCreateOneWithoutMealPlansInput {
  create: GroupCreateWithoutMealPlansInput
  connect: GroupWhereUniqueInput
}

input GroupCreateOneWithoutUsersInput {
  create: GroupCreateWithoutUsersInput
  connect: GroupWhereUniqueInput
}

input GroupCreateWithoutCreatorInput {
  id: ID
  name: String!
  isPrivate: Boolean
  owner: UserCreateOneWithoutOwnedGroupsInput!
  users: UserCreateManyWithoutGroupInput
  mealPlans: MealPlanCreateManyWithoutGroupInput
}

input GroupCreateWithoutMealPlansInput {
  id: ID
  name: String!
  isPrivate: Boolean
  creator: UserCreateOneWithoutCreatedGroupsInput!
  owner: UserCreateOneWithoutOwnedGroupsInput!
  users: UserCreateManyWithoutGroupInput
}

input GroupCreateWithoutOwnerInput {
  id: ID
  name: String!
  isPrivate: Boolean
  creator: UserCreateOneWithoutCreatedGroupsInput!
  users: UserCreateManyWithoutGroupInput
  mealPlans: MealPlanCreateManyWithoutGroupInput
}

input GroupCreateWithoutUsersInput {
  id: ID
  name: String!
  isPrivate: Boolean
  creator: UserCreateOneWithoutCreatedGroupsInput!
  owner: UserCreateOneWithoutOwnedGroupsInput!
  mealPlans: MealPlanCreateManyWithoutGroupInput
}

"""An edge in a connection."""
type GroupEdge {
  """The item at the end of the edge."""
  node: Group!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GroupOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  isPrivate_ASC
  isPrivate_DESC
}

type GroupPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  isPrivate: Boolean
}

input GroupScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [GroupScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [GroupScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GroupScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  isPrivate: Boolean

  """All values that are not equal to given value."""
  isPrivate_not: Boolean
}

type GroupSubscriptionPayload {
  mutation: MutationType!
  node: Group
  updatedFields: [String!]
  previousValues: GroupPreviousValues
}

input GroupSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GroupSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GroupSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GroupSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GroupWhereInput
}

input GroupUpdateInput {
  name: String
  isPrivate: Boolean
  creator: UserUpdateOneRequiredWithoutCreatedGroupsInput
  owner: UserUpdateOneRequiredWithoutOwnedGroupsInput
  users: UserUpdateManyWithoutGroupInput
  mealPlans: MealPlanUpdateManyWithoutGroupInput
}

input GroupUpdateManyDataInput {
  name: String
  isPrivate: Boolean
}

input GroupUpdateManyMutationInput {
  name: String
  isPrivate: Boolean
}

input GroupUpdateManyWithoutCreatorInput {
  create: [GroupCreateWithoutCreatorInput!]
  connect: [GroupWhereUniqueInput!]
  set: [GroupWhereUniqueInput!]
  disconnect: [GroupWhereUniqueInput!]
  delete: [GroupWhereUniqueInput!]
  update: [GroupUpdateWithWhereUniqueWithoutCreatorInput!]
  updateMany: [GroupUpdateManyWithWhereNestedInput!]
  deleteMany: [GroupScalarWhereInput!]
  upsert: [GroupUpsertWithWhereUniqueWithoutCreatorInput!]
}

input GroupUpdateManyWithoutOwnerInput {
  create: [GroupCreateWithoutOwnerInput!]
  connect: [GroupWhereUniqueInput!]
  set: [GroupWhereUniqueInput!]
  disconnect: [GroupWhereUniqueInput!]
  delete: [GroupWhereUniqueInput!]
  update: [GroupUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [GroupUpdateManyWithWhereNestedInput!]
  deleteMany: [GroupScalarWhereInput!]
  upsert: [GroupUpsertWithWhereUniqueWithoutOwnerInput!]
}

input GroupUpdateManyWithWhereNestedInput {
  where: GroupScalarWhereInput!
  data: GroupUpdateManyDataInput!
}

input GroupUpdateOneWithoutMealPlansInput {
  create: GroupCreateWithoutMealPlansInput
  connect: GroupWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: GroupUpdateWithoutMealPlansDataInput
  upsert: GroupUpsertWithoutMealPlansInput
}

input GroupUpdateOneWithoutUsersInput {
  create: GroupCreateWithoutUsersInput
  connect: GroupWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: GroupUpdateWithoutUsersDataInput
  upsert: GroupUpsertWithoutUsersInput
}

input GroupUpdateWithoutCreatorDataInput {
  name: String
  isPrivate: Boolean
  owner: UserUpdateOneRequiredWithoutOwnedGroupsInput
  users: UserUpdateManyWithoutGroupInput
  mealPlans: MealPlanUpdateManyWithoutGroupInput
}

input GroupUpdateWithoutMealPlansDataInput {
  name: String
  isPrivate: Boolean
  creator: UserUpdateOneRequiredWithoutCreatedGroupsInput
  owner: UserUpdateOneRequiredWithoutOwnedGroupsInput
  users: UserUpdateManyWithoutGroupInput
}

input GroupUpdateWithoutOwnerDataInput {
  name: String
  isPrivate: Boolean
  creator: UserUpdateOneRequiredWithoutCreatedGroupsInput
  users: UserUpdateManyWithoutGroupInput
  mealPlans: MealPlanUpdateManyWithoutGroupInput
}

input GroupUpdateWithoutUsersDataInput {
  name: String
  isPrivate: Boolean
  creator: UserUpdateOneRequiredWithoutCreatedGroupsInput
  owner: UserUpdateOneRequiredWithoutOwnedGroupsInput
  mealPlans: MealPlanUpdateManyWithoutGroupInput
}

input GroupUpdateWithWhereUniqueWithoutCreatorInput {
  where: GroupWhereUniqueInput!
  data: GroupUpdateWithoutCreatorDataInput!
}

input GroupUpdateWithWhereUniqueWithoutOwnerInput {
  where: GroupWhereUniqueInput!
  data: GroupUpdateWithoutOwnerDataInput!
}

input GroupUpsertWithoutMealPlansInput {
  update: GroupUpdateWithoutMealPlansDataInput!
  create: GroupCreateWithoutMealPlansInput!
}

input GroupUpsertWithoutUsersInput {
  update: GroupUpdateWithoutUsersDataInput!
  create: GroupCreateWithoutUsersInput!
}

input GroupUpsertWithWhereUniqueWithoutCreatorInput {
  where: GroupWhereUniqueInput!
  update: GroupUpdateWithoutCreatorDataInput!
  create: GroupCreateWithoutCreatorInput!
}

input GroupUpsertWithWhereUniqueWithoutOwnerInput {
  where: GroupWhereUniqueInput!
  update: GroupUpdateWithoutOwnerDataInput!
  create: GroupCreateWithoutOwnerInput!
}

input GroupWhereInput {
  """Logical AND on all given filters."""
  AND: [GroupWhereInput!]

  """Logical OR on all given filters."""
  OR: [GroupWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GroupWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  isPrivate: Boolean

  """All values that are not equal to given value."""
  isPrivate_not: Boolean
  creator: UserWhereInput
  owner: UserWhereInput
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  mealPlans_every: MealPlanWhereInput
  mealPlans_some: MealPlanWhereInput
  mealPlans_none: MealPlanWhereInput
}

input GroupWhereUniqueInput {
  id: ID
  name: String
}

type Ingredient implements Node {
  id: ID!
  food: Food!
  quantity: Float!
  quantityType: QuantityType!
}

"""A connection to a list of items."""
type IngredientConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [IngredientEdge]!
  aggregate: AggregateIngredient!
}

input IngredientCreateInput {
  id: ID
  quantity: Float!
  quantityType: QuantityType!
  food: FoodCreateOneInput!
}

input IngredientCreateManyInput {
  create: [IngredientCreateInput!]
  connect: [IngredientWhereUniqueInput!]
}

"""An edge in a connection."""
type IngredientEdge {
  """The item at the end of the edge."""
  node: Ingredient!

  """A cursor for use in pagination."""
  cursor: String!
}

enum IngredientOrderByInput {
  id_ASC
  id_DESC
  quantity_ASC
  quantity_DESC
  quantityType_ASC
  quantityType_DESC
}

type IngredientPreviousValues {
  id: ID!
  quantity: Float!
  quantityType: QuantityType!
}

input IngredientScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [IngredientScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [IngredientScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [IngredientScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  quantity: Float

  """All values that are not equal to given value."""
  quantity_not: Float

  """All values that are contained in given list."""
  quantity_in: [Float!]

  """All values that are not contained in given list."""
  quantity_not_in: [Float!]

  """All values less than the given value."""
  quantity_lt: Float

  """All values less than or equal the given value."""
  quantity_lte: Float

  """All values greater than the given value."""
  quantity_gt: Float

  """All values greater than or equal the given value."""
  quantity_gte: Float
  quantityType: QuantityType

  """All values that are not equal to given value."""
  quantityType_not: QuantityType

  """All values that are contained in given list."""
  quantityType_in: [QuantityType!]

  """All values that are not contained in given list."""
  quantityType_not_in: [QuantityType!]
}

type IngredientSubscriptionPayload {
  mutation: MutationType!
  node: Ingredient
  updatedFields: [String!]
  previousValues: IngredientPreviousValues
}

input IngredientSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [IngredientSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [IngredientSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [IngredientSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: IngredientWhereInput
}

input IngredientUpdateDataInput {
  quantity: Float
  quantityType: QuantityType
  food: FoodUpdateOneRequiredInput
}

input IngredientUpdateInput {
  quantity: Float
  quantityType: QuantityType
  food: FoodUpdateOneRequiredInput
}

input IngredientUpdateManyDataInput {
  quantity: Float
  quantityType: QuantityType
}

input IngredientUpdateManyInput {
  create: [IngredientCreateInput!]
  connect: [IngredientWhereUniqueInput!]
  set: [IngredientWhereUniqueInput!]
  disconnect: [IngredientWhereUniqueInput!]
  delete: [IngredientWhereUniqueInput!]
  update: [IngredientUpdateWithWhereUniqueNestedInput!]
  updateMany: [IngredientUpdateManyWithWhereNestedInput!]
  deleteMany: [IngredientScalarWhereInput!]
  upsert: [IngredientUpsertWithWhereUniqueNestedInput!]
}

input IngredientUpdateManyMutationInput {
  quantity: Float
  quantityType: QuantityType
}

input IngredientUpdateManyWithWhereNestedInput {
  where: IngredientScalarWhereInput!
  data: IngredientUpdateManyDataInput!
}

input IngredientUpdateWithWhereUniqueNestedInput {
  where: IngredientWhereUniqueInput!
  data: IngredientUpdateDataInput!
}

input IngredientUpsertWithWhereUniqueNestedInput {
  where: IngredientWhereUniqueInput!
  update: IngredientUpdateDataInput!
  create: IngredientCreateInput!
}

input IngredientWhereInput {
  """Logical AND on all given filters."""
  AND: [IngredientWhereInput!]

  """Logical OR on all given filters."""
  OR: [IngredientWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [IngredientWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  quantity: Float

  """All values that are not equal to given value."""
  quantity_not: Float

  """All values that are contained in given list."""
  quantity_in: [Float!]

  """All values that are not contained in given list."""
  quantity_not_in: [Float!]

  """All values less than the given value."""
  quantity_lt: Float

  """All values less than or equal the given value."""
  quantity_lte: Float

  """All values greater than the given value."""
  quantity_gt: Float

  """All values greater than or equal the given value."""
  quantity_gte: Float
  quantityType: QuantityType

  """All values that are not equal to given value."""
  quantityType_not: QuantityType

  """All values that are contained in given list."""
  quantityType_in: [QuantityType!]

  """All values that are not contained in given list."""
  quantityType_not_in: [QuantityType!]
  food: FoodWhereInput
}

input IngredientWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type MealDay implements Node {
  id: ID!
  recipe: Recipe
  date: DateTime!
}

"""A connection to a list of items."""
type MealDayConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MealDayEdge]!
  aggregate: AggregateMealDay!
}

input MealDayCreateInput {
  id: ID
  date: DateTime!
  recipe: RecipeCreateOneInput
}

input MealDayCreateManyInput {
  create: [MealDayCreateInput!]
  connect: [MealDayWhereUniqueInput!]
}

"""An edge in a connection."""
type MealDayEdge {
  """The item at the end of the edge."""
  node: MealDay!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MealDayOrderByInput {
  id_ASC
  id_DESC
  date_ASC
  date_DESC
}

type MealDayPreviousValues {
  id: ID!
  date: DateTime!
}

input MealDayScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [MealDayScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [MealDayScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MealDayScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  date: DateTime

  """All values that are not equal to given value."""
  date_not: DateTime

  """All values that are contained in given list."""
  date_in: [DateTime!]

  """All values that are not contained in given list."""
  date_not_in: [DateTime!]

  """All values less than the given value."""
  date_lt: DateTime

  """All values less than or equal the given value."""
  date_lte: DateTime

  """All values greater than the given value."""
  date_gt: DateTime

  """All values greater than or equal the given value."""
  date_gte: DateTime
}

type MealDaySubscriptionPayload {
  mutation: MutationType!
  node: MealDay
  updatedFields: [String!]
  previousValues: MealDayPreviousValues
}

input MealDaySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MealDaySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MealDaySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MealDaySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MealDayWhereInput
}

input MealDayUpdateDataInput {
  date: DateTime
  recipe: RecipeUpdateOneInput
}

input MealDayUpdateInput {
  date: DateTime
  recipe: RecipeUpdateOneInput
}

input MealDayUpdateManyDataInput {
  date: DateTime
}

input MealDayUpdateManyInput {
  create: [MealDayCreateInput!]
  connect: [MealDayWhereUniqueInput!]
  set: [MealDayWhereUniqueInput!]
  disconnect: [MealDayWhereUniqueInput!]
  delete: [MealDayWhereUniqueInput!]
  update: [MealDayUpdateWithWhereUniqueNestedInput!]
  updateMany: [MealDayUpdateManyWithWhereNestedInput!]
  deleteMany: [MealDayScalarWhereInput!]
  upsert: [MealDayUpsertWithWhereUniqueNestedInput!]
}

input MealDayUpdateManyMutationInput {
  date: DateTime
}

input MealDayUpdateManyWithWhereNestedInput {
  where: MealDayScalarWhereInput!
  data: MealDayUpdateManyDataInput!
}

input MealDayUpdateWithWhereUniqueNestedInput {
  where: MealDayWhereUniqueInput!
  data: MealDayUpdateDataInput!
}

input MealDayUpsertWithWhereUniqueNestedInput {
  where: MealDayWhereUniqueInput!
  update: MealDayUpdateDataInput!
  create: MealDayCreateInput!
}

input MealDayWhereInput {
  """Logical AND on all given filters."""
  AND: [MealDayWhereInput!]

  """Logical OR on all given filters."""
  OR: [MealDayWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MealDayWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  date: DateTime

  """All values that are not equal to given value."""
  date_not: DateTime

  """All values that are contained in given list."""
  date_in: [DateTime!]

  """All values that are not contained in given list."""
  date_not_in: [DateTime!]

  """All values less than the given value."""
  date_lt: DateTime

  """All values less than or equal the given value."""
  date_lte: DateTime

  """All values greater than the given value."""
  date_gt: DateTime

  """All values greater than or equal the given value."""
  date_gte: DateTime
  recipe: RecipeWhereInput
}

input MealDayWhereUniqueInput {
  id: ID
}

type MealPlan implements Node {
  id: ID!
  startDate: DateTime!
  endDate: DateTime!
  mealDays(where: MealDayWhereInput, orderBy: MealDayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MealDay!]
  group: Group
  user: User
}

"""A connection to a list of items."""
type MealPlanConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MealPlanEdge]!
  aggregate: AggregateMealPlan!
}

input MealPlanCreateInput {
  id: ID
  startDate: DateTime!
  endDate: DateTime!
  mealDays: MealDayCreateManyInput
  group: GroupCreateOneWithoutMealPlansInput
  user: UserCreateOneWithoutMealPlansInput
}

input MealPlanCreateManyWithoutGroupInput {
  create: [MealPlanCreateWithoutGroupInput!]
  connect: [MealPlanWhereUniqueInput!]
}

input MealPlanCreateManyWithoutUserInput {
  create: [MealPlanCreateWithoutUserInput!]
  connect: [MealPlanWhereUniqueInput!]
}

input MealPlanCreateWithoutGroupInput {
  id: ID
  startDate: DateTime!
  endDate: DateTime!
  mealDays: MealDayCreateManyInput
  user: UserCreateOneWithoutMealPlansInput
}

input MealPlanCreateWithoutUserInput {
  id: ID
  startDate: DateTime!
  endDate: DateTime!
  mealDays: MealDayCreateManyInput
  group: GroupCreateOneWithoutMealPlansInput
}

"""An edge in a connection."""
type MealPlanEdge {
  """The item at the end of the edge."""
  node: MealPlan!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MealPlanOrderByInput {
  id_ASC
  id_DESC
  startDate_ASC
  startDate_DESC
  endDate_ASC
  endDate_DESC
}

type MealPlanPreviousValues {
  id: ID!
  startDate: DateTime!
  endDate: DateTime!
}

input MealPlanScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [MealPlanScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [MealPlanScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MealPlanScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  startDate: DateTime

  """All values that are not equal to given value."""
  startDate_not: DateTime

  """All values that are contained in given list."""
  startDate_in: [DateTime!]

  """All values that are not contained in given list."""
  startDate_not_in: [DateTime!]

  """All values less than the given value."""
  startDate_lt: DateTime

  """All values less than or equal the given value."""
  startDate_lte: DateTime

  """All values greater than the given value."""
  startDate_gt: DateTime

  """All values greater than or equal the given value."""
  startDate_gte: DateTime
  endDate: DateTime

  """All values that are not equal to given value."""
  endDate_not: DateTime

  """All values that are contained in given list."""
  endDate_in: [DateTime!]

  """All values that are not contained in given list."""
  endDate_not_in: [DateTime!]

  """All values less than the given value."""
  endDate_lt: DateTime

  """All values less than or equal the given value."""
  endDate_lte: DateTime

  """All values greater than the given value."""
  endDate_gt: DateTime

  """All values greater than or equal the given value."""
  endDate_gte: DateTime
}

type MealPlanSubscriptionPayload {
  mutation: MutationType!
  node: MealPlan
  updatedFields: [String!]
  previousValues: MealPlanPreviousValues
}

input MealPlanSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MealPlanSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MealPlanSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MealPlanSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MealPlanWhereInput
}

input MealPlanUpdateInput {
  startDate: DateTime
  endDate: DateTime
  mealDays: MealDayUpdateManyInput
  group: GroupUpdateOneWithoutMealPlansInput
  user: UserUpdateOneWithoutMealPlansInput
}

input MealPlanUpdateManyDataInput {
  startDate: DateTime
  endDate: DateTime
}

input MealPlanUpdateManyMutationInput {
  startDate: DateTime
  endDate: DateTime
}

input MealPlanUpdateManyWithoutGroupInput {
  create: [MealPlanCreateWithoutGroupInput!]
  connect: [MealPlanWhereUniqueInput!]
  set: [MealPlanWhereUniqueInput!]
  disconnect: [MealPlanWhereUniqueInput!]
  delete: [MealPlanWhereUniqueInput!]
  update: [MealPlanUpdateWithWhereUniqueWithoutGroupInput!]
  updateMany: [MealPlanUpdateManyWithWhereNestedInput!]
  deleteMany: [MealPlanScalarWhereInput!]
  upsert: [MealPlanUpsertWithWhereUniqueWithoutGroupInput!]
}

input MealPlanUpdateManyWithoutUserInput {
  create: [MealPlanCreateWithoutUserInput!]
  connect: [MealPlanWhereUniqueInput!]
  set: [MealPlanWhereUniqueInput!]
  disconnect: [MealPlanWhereUniqueInput!]
  delete: [MealPlanWhereUniqueInput!]
  update: [MealPlanUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [MealPlanUpdateManyWithWhereNestedInput!]
  deleteMany: [MealPlanScalarWhereInput!]
  upsert: [MealPlanUpsertWithWhereUniqueWithoutUserInput!]
}

input MealPlanUpdateManyWithWhereNestedInput {
  where: MealPlanScalarWhereInput!
  data: MealPlanUpdateManyDataInput!
}

input MealPlanUpdateWithoutGroupDataInput {
  startDate: DateTime
  endDate: DateTime
  mealDays: MealDayUpdateManyInput
  user: UserUpdateOneWithoutMealPlansInput
}

input MealPlanUpdateWithoutUserDataInput {
  startDate: DateTime
  endDate: DateTime
  mealDays: MealDayUpdateManyInput
  group: GroupUpdateOneWithoutMealPlansInput
}

input MealPlanUpdateWithWhereUniqueWithoutGroupInput {
  where: MealPlanWhereUniqueInput!
  data: MealPlanUpdateWithoutGroupDataInput!
}

input MealPlanUpdateWithWhereUniqueWithoutUserInput {
  where: MealPlanWhereUniqueInput!
  data: MealPlanUpdateWithoutUserDataInput!
}

input MealPlanUpsertWithWhereUniqueWithoutGroupInput {
  where: MealPlanWhereUniqueInput!
  update: MealPlanUpdateWithoutGroupDataInput!
  create: MealPlanCreateWithoutGroupInput!
}

input MealPlanUpsertWithWhereUniqueWithoutUserInput {
  where: MealPlanWhereUniqueInput!
  update: MealPlanUpdateWithoutUserDataInput!
  create: MealPlanCreateWithoutUserInput!
}

input MealPlanWhereInput {
  """Logical AND on all given filters."""
  AND: [MealPlanWhereInput!]

  """Logical OR on all given filters."""
  OR: [MealPlanWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MealPlanWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  startDate: DateTime

  """All values that are not equal to given value."""
  startDate_not: DateTime

  """All values that are contained in given list."""
  startDate_in: [DateTime!]

  """All values that are not contained in given list."""
  startDate_not_in: [DateTime!]

  """All values less than the given value."""
  startDate_lt: DateTime

  """All values less than or equal the given value."""
  startDate_lte: DateTime

  """All values greater than the given value."""
  startDate_gt: DateTime

  """All values greater than or equal the given value."""
  startDate_gte: DateTime
  endDate: DateTime

  """All values that are not equal to given value."""
  endDate_not: DateTime

  """All values that are contained in given list."""
  endDate_in: [DateTime!]

  """All values that are not contained in given list."""
  endDate_not_in: [DateTime!]

  """All values less than the given value."""
  endDate_lt: DateTime

  """All values less than or equal the given value."""
  endDate_lte: DateTime

  """All values greater than the given value."""
  endDate_gt: DateTime

  """All values greater than or equal the given value."""
  endDate_gte: DateTime
  mealDays_every: MealDayWhereInput
  mealDays_some: MealDayWhereInput
  mealDays_none: MealDayWhereInput
  group: GroupWhereInput
  user: UserWhereInput
}

input MealPlanWhereUniqueInput {
  id: ID
}

type Mutation {
  createUser(data: UserCreateInput!): User!
  createGroup(data: GroupCreateInput!): Group!
  createMealPlan(data: MealPlanCreateInput!): MealPlan!
  createIngredient(data: IngredientCreateInput!): Ingredient!
  createRecipe(data: RecipeCreateInput!): Recipe!
  createMealDay(data: MealDayCreateInput!): MealDay!
  createFood(data: FoodCreateInput!): Food!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateGroup(data: GroupUpdateInput!, where: GroupWhereUniqueInput!): Group
  updateMealPlan(data: MealPlanUpdateInput!, where: MealPlanWhereUniqueInput!): MealPlan
  updateIngredient(data: IngredientUpdateInput!, where: IngredientWhereUniqueInput!): Ingredient
  updateRecipe(data: RecipeUpdateInput!, where: RecipeWhereUniqueInput!): Recipe
  updateMealDay(data: MealDayUpdateInput!, where: MealDayWhereUniqueInput!): MealDay
  updateFood(data: FoodUpdateInput!, where: FoodWhereUniqueInput!): Food
  deleteUser(where: UserWhereUniqueInput!): User
  deleteGroup(where: GroupWhereUniqueInput!): Group
  deleteMealPlan(where: MealPlanWhereUniqueInput!): MealPlan
  deleteIngredient(where: IngredientWhereUniqueInput!): Ingredient
  deleteRecipe(where: RecipeWhereUniqueInput!): Recipe
  deleteMealDay(where: MealDayWhereUniqueInput!): MealDay
  deleteFood(where: FoodWhereUniqueInput!): Food
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertGroup(where: GroupWhereUniqueInput!, create: GroupCreateInput!, update: GroupUpdateInput!): Group!
  upsertMealPlan(where: MealPlanWhereUniqueInput!, create: MealPlanCreateInput!, update: MealPlanUpdateInput!): MealPlan!
  upsertIngredient(where: IngredientWhereUniqueInput!, create: IngredientCreateInput!, update: IngredientUpdateInput!): Ingredient!
  upsertRecipe(where: RecipeWhereUniqueInput!, create: RecipeCreateInput!, update: RecipeUpdateInput!): Recipe!
  upsertMealDay(where: MealDayWhereUniqueInput!, create: MealDayCreateInput!, update: MealDayUpdateInput!): MealDay!
  upsertFood(where: FoodWhereUniqueInput!, create: FoodCreateInput!, update: FoodUpdateInput!): Food!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyGroups(data: GroupUpdateManyMutationInput!, where: GroupWhereInput): BatchPayload!
  updateManyMealPlans(data: MealPlanUpdateManyMutationInput!, where: MealPlanWhereInput): BatchPayload!
  updateManyIngredients(data: IngredientUpdateManyMutationInput!, where: IngredientWhereInput): BatchPayload!
  updateManyRecipes(data: RecipeUpdateManyMutationInput!, where: RecipeWhereInput): BatchPayload!
  updateManyMealDays(data: MealDayUpdateManyMutationInput!, where: MealDayWhereInput): BatchPayload!
  updateManyFoods(data: FoodUpdateManyMutationInput!, where: FoodWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyGroups(where: GroupWhereInput): BatchPayload!
  deleteManyMealPlans(where: MealPlanWhereInput): BatchPayload!
  deleteManyIngredients(where: IngredientWhereInput): BatchPayload!
  deleteManyRecipes(where: RecipeWhereInput): BatchPayload!
  deleteManyMealDays(where: MealDayWhereInput): BatchPayload!
  deleteManyFoods(where: FoodWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum Permission {
  ADMIN
  USER
  PERMISSIONUPDATE
}

enum QuantityType {
  CLOVES
  CUP
  GRAMS
  LEAVES
  SPRIGS
  TABLESPOON
  TEASPOON
  WHOLE
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group]!
  mealPlans(where: MealPlanWhereInput, orderBy: MealPlanOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MealPlan]!
  ingredients(where: IngredientWhereInput, orderBy: IngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ingredient]!
  recipes(where: RecipeWhereInput, orderBy: RecipeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Recipe]!
  mealDays(where: MealDayWhereInput, orderBy: MealDayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MealDay]!
  foods(where: FoodWhereInput, orderBy: FoodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Food]!
  user(where: UserWhereUniqueInput!): User
  group(where: GroupWhereUniqueInput!): Group
  mealPlan(where: MealPlanWhereUniqueInput!): MealPlan
  ingredient(where: IngredientWhereUniqueInput!): Ingredient
  recipe(where: RecipeWhereUniqueInput!): Recipe
  mealDay(where: MealDayWhereUniqueInput!): MealDay
  food(where: FoodWhereUniqueInput!): Food
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  groupsConnection(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GroupConnection!
  mealPlansConnection(where: MealPlanWhereInput, orderBy: MealPlanOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MealPlanConnection!
  ingredientsConnection(where: IngredientWhereInput, orderBy: IngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IngredientConnection!
  recipesConnection(where: RecipeWhereInput, orderBy: RecipeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RecipeConnection!
  mealDaysConnection(where: MealDayWhereInput, orderBy: MealDayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MealDayConnection!
  foodsConnection(where: FoodWhereInput, orderBy: FoodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FoodConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Recipe implements Node {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  searchName: String
  ingredients(where: IngredientWhereInput, orderBy: IngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ingredient!]
  instructions: String
  author: User
}

"""A connection to a list of items."""
type RecipeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RecipeEdge]!
  aggregate: AggregateRecipe!
}

input RecipeCreateInput {
  id: ID
  name: String!
  searchName: String
  instructions: String
  ingredients: IngredientCreateManyInput
  author: UserCreateOneWithoutRecipesInput
}

input RecipeCreateManyWithoutAuthorInput {
  create: [RecipeCreateWithoutAuthorInput!]
  connect: [RecipeWhereUniqueInput!]
}

input RecipeCreateOneInput {
  create: RecipeCreateInput
  connect: RecipeWhereUniqueInput
}

input RecipeCreateWithoutAuthorInput {
  id: ID
  name: String!
  searchName: String
  instructions: String
  ingredients: IngredientCreateManyInput
}

"""An edge in a connection."""
type RecipeEdge {
  """The item at the end of the edge."""
  node: Recipe!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RecipeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  searchName_ASC
  searchName_DESC
  instructions_ASC
  instructions_DESC
}

type RecipePreviousValues {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  searchName: String
  instructions: String
}

input RecipeScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [RecipeScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [RecipeScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RecipeScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  searchName: String

  """All values that are not equal to given value."""
  searchName_not: String

  """All values that are contained in given list."""
  searchName_in: [String!]

  """All values that are not contained in given list."""
  searchName_not_in: [String!]

  """All values less than the given value."""
  searchName_lt: String

  """All values less than or equal the given value."""
  searchName_lte: String

  """All values greater than the given value."""
  searchName_gt: String

  """All values greater than or equal the given value."""
  searchName_gte: String

  """All values containing the given string."""
  searchName_contains: String

  """All values not containing the given string."""
  searchName_not_contains: String

  """All values starting with the given string."""
  searchName_starts_with: String

  """All values not starting with the given string."""
  searchName_not_starts_with: String

  """All values ending with the given string."""
  searchName_ends_with: String

  """All values not ending with the given string."""
  searchName_not_ends_with: String
  instructions: String

  """All values that are not equal to given value."""
  instructions_not: String

  """All values that are contained in given list."""
  instructions_in: [String!]

  """All values that are not contained in given list."""
  instructions_not_in: [String!]

  """All values less than the given value."""
  instructions_lt: String

  """All values less than or equal the given value."""
  instructions_lte: String

  """All values greater than the given value."""
  instructions_gt: String

  """All values greater than or equal the given value."""
  instructions_gte: String

  """All values containing the given string."""
  instructions_contains: String

  """All values not containing the given string."""
  instructions_not_contains: String

  """All values starting with the given string."""
  instructions_starts_with: String

  """All values not starting with the given string."""
  instructions_not_starts_with: String

  """All values ending with the given string."""
  instructions_ends_with: String

  """All values not ending with the given string."""
  instructions_not_ends_with: String
}

type RecipeSubscriptionPayload {
  mutation: MutationType!
  node: Recipe
  updatedFields: [String!]
  previousValues: RecipePreviousValues
}

input RecipeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RecipeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RecipeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RecipeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RecipeWhereInput
}

input RecipeUpdateDataInput {
  name: String
  searchName: String
  instructions: String
  ingredients: IngredientUpdateManyInput
  author: UserUpdateOneWithoutRecipesInput
}

input RecipeUpdateInput {
  name: String
  searchName: String
  instructions: String
  ingredients: IngredientUpdateManyInput
  author: UserUpdateOneWithoutRecipesInput
}

input RecipeUpdateManyDataInput {
  name: String
  searchName: String
  instructions: String
}

input RecipeUpdateManyMutationInput {
  name: String
  searchName: String
  instructions: String
}

input RecipeUpdateManyWithoutAuthorInput {
  create: [RecipeCreateWithoutAuthorInput!]
  connect: [RecipeWhereUniqueInput!]
  set: [RecipeWhereUniqueInput!]
  disconnect: [RecipeWhereUniqueInput!]
  delete: [RecipeWhereUniqueInput!]
  update: [RecipeUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [RecipeUpdateManyWithWhereNestedInput!]
  deleteMany: [RecipeScalarWhereInput!]
  upsert: [RecipeUpsertWithWhereUniqueWithoutAuthorInput!]
}

input RecipeUpdateManyWithWhereNestedInput {
  where: RecipeScalarWhereInput!
  data: RecipeUpdateManyDataInput!
}

input RecipeUpdateOneInput {
  create: RecipeCreateInput
  connect: RecipeWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: RecipeUpdateDataInput
  upsert: RecipeUpsertNestedInput
}

input RecipeUpdateWithoutAuthorDataInput {
  name: String
  searchName: String
  instructions: String
  ingredients: IngredientUpdateManyInput
}

input RecipeUpdateWithWhereUniqueWithoutAuthorInput {
  where: RecipeWhereUniqueInput!
  data: RecipeUpdateWithoutAuthorDataInput!
}

input RecipeUpsertNestedInput {
  update: RecipeUpdateDataInput!
  create: RecipeCreateInput!
}

input RecipeUpsertWithWhereUniqueWithoutAuthorInput {
  where: RecipeWhereUniqueInput!
  update: RecipeUpdateWithoutAuthorDataInput!
  create: RecipeCreateWithoutAuthorInput!
}

input RecipeWhereInput {
  """Logical AND on all given filters."""
  AND: [RecipeWhereInput!]

  """Logical OR on all given filters."""
  OR: [RecipeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RecipeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  searchName: String

  """All values that are not equal to given value."""
  searchName_not: String

  """All values that are contained in given list."""
  searchName_in: [String!]

  """All values that are not contained in given list."""
  searchName_not_in: [String!]

  """All values less than the given value."""
  searchName_lt: String

  """All values less than or equal the given value."""
  searchName_lte: String

  """All values greater than the given value."""
  searchName_gt: String

  """All values greater than or equal the given value."""
  searchName_gte: String

  """All values containing the given string."""
  searchName_contains: String

  """All values not containing the given string."""
  searchName_not_contains: String

  """All values starting with the given string."""
  searchName_starts_with: String

  """All values not starting with the given string."""
  searchName_not_starts_with: String

  """All values ending with the given string."""
  searchName_ends_with: String

  """All values not ending with the given string."""
  searchName_not_ends_with: String
  instructions: String

  """All values that are not equal to given value."""
  instructions_not: String

  """All values that are contained in given list."""
  instructions_in: [String!]

  """All values that are not contained in given list."""
  instructions_not_in: [String!]

  """All values less than the given value."""
  instructions_lt: String

  """All values less than or equal the given value."""
  instructions_lte: String

  """All values greater than the given value."""
  instructions_gt: String

  """All values greater than or equal the given value."""
  instructions_gte: String

  """All values containing the given string."""
  instructions_contains: String

  """All values not containing the given string."""
  instructions_not_contains: String

  """All values starting with the given string."""
  instructions_starts_with: String

  """All values not starting with the given string."""
  instructions_not_starts_with: String

  """All values ending with the given string."""
  instructions_ends_with: String

  """All values not ending with the given string."""
  instructions_not_ends_with: String
  ingredients_every: IngredientWhereInput
  ingredients_some: IngredientWhereInput
  ingredients_none: IngredientWhereInput
  author: UserWhereInput
}

input RecipeWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  group(where: GroupSubscriptionWhereInput): GroupSubscriptionPayload
  mealPlan(where: MealPlanSubscriptionWhereInput): MealPlanSubscriptionPayload
  ingredient(where: IngredientSubscriptionWhereInput): IngredientSubscriptionPayload
  recipe(where: RecipeSubscriptionWhereInput): RecipeSubscriptionPayload
  mealDay(where: MealDaySubscriptionWhereInput): MealDaySubscriptionPayload
  food(where: FoodSubscriptionWhereInput): FoodSubscriptionPayload
}

type User implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
  recipes(where: RecipeWhereInput, orderBy: RecipeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Recipe!]
  group: Group
  createdGroups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group!]
  ownedGroups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group!]
  mealPlans(where: MealPlanWhereInput, orderBy: MealPlanOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MealPlan!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  recipes: RecipeCreateManyWithoutAuthorInput
  group: GroupCreateOneWithoutUsersInput
  createdGroups: GroupCreateManyWithoutCreatorInput
  ownedGroups: GroupCreateManyWithoutOwnerInput
  mealPlans: MealPlanCreateManyWithoutUserInput
}

input UserCreateManyWithoutGroupInput {
  create: [UserCreateWithoutGroupInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutCreatedGroupsInput {
  create: UserCreateWithoutCreatedGroupsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutMealPlansInput {
  create: UserCreateWithoutMealPlansInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutOwnedGroupsInput {
  create: UserCreateWithoutOwnedGroupsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutRecipesInput {
  create: UserCreateWithoutRecipesInput
  connect: UserWhereUniqueInput
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

input UserCreateWithoutCreatedGroupsInput {
  id: ID
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  recipes: RecipeCreateManyWithoutAuthorInput
  group: GroupCreateOneWithoutUsersInput
  ownedGroups: GroupCreateManyWithoutOwnerInput
  mealPlans: MealPlanCreateManyWithoutUserInput
}

input UserCreateWithoutGroupInput {
  id: ID
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  recipes: RecipeCreateManyWithoutAuthorInput
  createdGroups: GroupCreateManyWithoutCreatorInput
  ownedGroups: GroupCreateManyWithoutOwnerInput
  mealPlans: MealPlanCreateManyWithoutUserInput
}

input UserCreateWithoutMealPlansInput {
  id: ID
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  recipes: RecipeCreateManyWithoutAuthorInput
  group: GroupCreateOneWithoutUsersInput
  createdGroups: GroupCreateManyWithoutCreatorInput
  ownedGroups: GroupCreateManyWithoutOwnerInput
}

input UserCreateWithoutOwnedGroupsInput {
  id: ID
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  recipes: RecipeCreateManyWithoutAuthorInput
  group: GroupCreateOneWithoutUsersInput
  createdGroups: GroupCreateManyWithoutCreatorInput
  mealPlans: MealPlanCreateManyWithoutUserInput
}

input UserCreateWithoutRecipesInput {
  id: ID
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
  group: GroupCreateOneWithoutUsersInput
  createdGroups: GroupCreateManyWithoutCreatorInput
  ownedGroups: GroupCreateManyWithoutOwnerInput
  mealPlans: MealPlanCreateManyWithoutUserInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
}

input UserScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """All values that are not equal to given value."""
  resetTokenExpiry_not: Float

  """All values that are contained in given list."""
  resetTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  resetTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: Float

  """All values greater than the given value."""
  resetTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: Float
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  firstName: String
  lastName: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  recipes: RecipeUpdateManyWithoutAuthorInput
  group: GroupUpdateOneWithoutUsersInput
  createdGroups: GroupUpdateManyWithoutCreatorInput
  ownedGroups: GroupUpdateManyWithoutOwnerInput
  mealPlans: MealPlanUpdateManyWithoutUserInput
}

input UserUpdateManyDataInput {
  firstName: String
  lastName: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
}

input UserUpdateManyMutationInput {
  firstName: String
  lastName: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
}

input UserUpdateManyWithoutGroupInput {
  create: [UserCreateWithoutGroupInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutGroupInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutGroupInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutCreatedGroupsInput {
  create: UserCreateWithoutCreatedGroupsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutCreatedGroupsDataInput
  upsert: UserUpsertWithoutCreatedGroupsInput
}

input UserUpdateOneRequiredWithoutOwnedGroupsInput {
  create: UserCreateWithoutOwnedGroupsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutOwnedGroupsDataInput
  upsert: UserUpsertWithoutOwnedGroupsInput
}

input UserUpdateOneWithoutMealPlansInput {
  create: UserCreateWithoutMealPlansInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutMealPlansDataInput
  upsert: UserUpsertWithoutMealPlansInput
}

input UserUpdateOneWithoutRecipesInput {
  create: UserCreateWithoutRecipesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutRecipesDataInput
  upsert: UserUpsertWithoutRecipesInput
}

input UserUpdatepermissionsInput {
  set: [Permission!]
}

input UserUpdateWithoutCreatedGroupsDataInput {
  firstName: String
  lastName: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  recipes: RecipeUpdateManyWithoutAuthorInput
  group: GroupUpdateOneWithoutUsersInput
  ownedGroups: GroupUpdateManyWithoutOwnerInput
  mealPlans: MealPlanUpdateManyWithoutUserInput
}

input UserUpdateWithoutGroupDataInput {
  firstName: String
  lastName: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  recipes: RecipeUpdateManyWithoutAuthorInput
  createdGroups: GroupUpdateManyWithoutCreatorInput
  ownedGroups: GroupUpdateManyWithoutOwnerInput
  mealPlans: MealPlanUpdateManyWithoutUserInput
}

input UserUpdateWithoutMealPlansDataInput {
  firstName: String
  lastName: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  recipes: RecipeUpdateManyWithoutAuthorInput
  group: GroupUpdateOneWithoutUsersInput
  createdGroups: GroupUpdateManyWithoutCreatorInput
  ownedGroups: GroupUpdateManyWithoutOwnerInput
}

input UserUpdateWithoutOwnedGroupsDataInput {
  firstName: String
  lastName: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  recipes: RecipeUpdateManyWithoutAuthorInput
  group: GroupUpdateOneWithoutUsersInput
  createdGroups: GroupUpdateManyWithoutCreatorInput
  mealPlans: MealPlanUpdateManyWithoutUserInput
}

input UserUpdateWithoutRecipesDataInput {
  firstName: String
  lastName: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
  group: GroupUpdateOneWithoutUsersInput
  createdGroups: GroupUpdateManyWithoutCreatorInput
  ownedGroups: GroupUpdateManyWithoutOwnerInput
  mealPlans: MealPlanUpdateManyWithoutUserInput
}

input UserUpdateWithWhereUniqueWithoutGroupInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutGroupDataInput!
}

input UserUpsertWithoutCreatedGroupsInput {
  update: UserUpdateWithoutCreatedGroupsDataInput!
  create: UserCreateWithoutCreatedGroupsInput!
}

input UserUpsertWithoutMealPlansInput {
  update: UserUpdateWithoutMealPlansDataInput!
  create: UserCreateWithoutMealPlansInput!
}

input UserUpsertWithoutOwnedGroupsInput {
  update: UserUpdateWithoutOwnedGroupsDataInput!
  create: UserCreateWithoutOwnedGroupsInput!
}

input UserUpsertWithoutRecipesInput {
  update: UserUpdateWithoutRecipesDataInput!
  create: UserCreateWithoutRecipesInput!
}

input UserUpsertWithWhereUniqueWithoutGroupInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutGroupDataInput!
  create: UserCreateWithoutGroupInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """All values that are not equal to given value."""
  resetTokenExpiry_not: Float

  """All values that are contained in given list."""
  resetTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  resetTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: Float

  """All values greater than the given value."""
  resetTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: Float
  recipes_every: RecipeWhereInput
  recipes_some: RecipeWhereInput
  recipes_none: RecipeWhereInput
  group: GroupWhereInput
  createdGroups_every: GroupWhereInput
  createdGroups_some: GroupWhereInput
  createdGroups_none: GroupWhereInput
  ownedGroups_every: GroupWhereInput
  ownedGroups_some: GroupWhereInput
  ownedGroups_none: GroupWhereInput
  mealPlans_every: MealPlanWhereInput
  mealPlans_some: MealPlanWhereInput
  mealPlans_none: MealPlanWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
