# import * from './generated/prisma.graphql' 

type Mutation {
    signup(email: String!, password: String!, firstName: String!, lastName: String!): User!
    signin(email: String!, password: String!): User!
    signout: SuccessMessage
    requestReset(email: String!): SuccessMessage
    resetPassword(resetToken: String!, password: String!, confirmPassword: String!): User!
    updatePermissions(permissions: [Permission], userId: ID!): User
    createFood(food: FoodInput): Food
    updateFood(id: ID!, name: String!, subName: String, types: [FoodType!]!, image: String): Food
    deleteFood(id: ID!): Food
    createIngredient(foodId: ID!, quantity: Float!, quantityType: QuantityType!): Ingredient!
    updateIngredient(id: ID!, foodId: ID!, quantity: Float!): Ingredient    
    deleteIngredient(id: ID!): Ingredient
    createRecipe(name: String!, ingredients: [IngredientCreateInput], instructions: String): Recipe!
    updateRecipe(id: ID!, name: String!, ingredients: IngredientUpdateManyInput, instructions: String): Recipe!
    deleteRecipe(id: ID!): Recipe
    createMealPlan(mealPlan: MealPlanCreateInput): MealPlan!
    updateMealPlan(mealPlan: MealPlanUpdateInput): MealPlan
    createGroup(group: GroupCreateInput): Group
    updateGroup(group: GroupUpdateInput): Group
    deleteGroup(id: ID): Group

    # utility mutations
    initialiseBreadsAndPastriesData: [Food]
    initialiseDairyAndCheeseData: [Food]
    initialiseCondimentsData: [Food]
    initialiseFruitsData: [Food]
    initialiseGrainsData: [Food]
    initialiseMeatsData: [Food]
    initialiseNutsData: [Food]
    initialisePastasData: [Food]
    initialiseVegetableData: [Food]
  }

type Query {
    me: User
    users: [User]!
    food(id: ID!): Food
    foods(searchTerm: String, orderBy: FoodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Food]!
    foodsConnection(where: FoodWhereInput, orderBy: FoodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FoodConnection!
    ingredients(where: IngredientWhereInput, orderBy: IngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ingredient]!
    ingredientsConnection(where: IngredientWhereInput, orderBy: IngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IngredientConnection!
    recipe(where: RecipeWhereUniqueInput!): Recipe
    recipes(searchTerm: String, orderBy: RecipeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Recipe]!
    mealDay(where: MealDayWhereUniqueInput!): MealDay
    calendarMealDays(date: DateTime): [CalendarMealDays]
    mealPlan(where: MealPlanWhereUniqueInput!): MealPlan
    mealPlans(where: MealPlanWhereInput, orderBy: MealPlanOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MealPlan]!
    groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group]!
    group(id: ID!): Group
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  permissions: [Permission!]!
  recipes: [Recipe!]
  group: Group
  createdGroups: [Group!]
  ownedGroups: [Group!]
  mealPlans: [MealPlan!]
}

type Group {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  creator: User!
  owner: User!
  users: [User!]!
  isPrivate: Boolean
  mealPlans: [MealPlan!]
}

input GroupCreateInput {
  name: String!
  isPrivate: Boolean
  owner: ID
  users: [ID!]
}

input GroupUpdateInput {
  id: ID!
  name: String!
  isPrivate: Boolean
  owner: ID
  users: [ID!]
  mealPlans: [ID]
}

type SuccessMessage {
  message: String
}

type Food {
    id: ID!
    name: String!
    subName: String
    types: [FoodType!]!
    image: String
}

input FoodInput {
  name: String!
  subName: String
  types: [FoodType!]!
  image: String
}

type Ingredient {
  id: ID!
  food: Food!
  quantity: Float!
  quantityType: QuantityType!
}

input IngredientUpdateManyInput {
    create: [IngredientCreateInput!],
    connect: [IngredientWhereUniqueInput!],
    update: [IngredientUpdateInput!],    
    delete: [IngredientWhereUniqueInput!],
}

input IngredientCreateInput {
    foodId: ID!
    quantity: Float!
    quantityType: QuantityType!
}

input IngredientUpdateInput {
    id: ID!
    foodId: ID!
    quantity: Float!
    quantityType: QuantityType!
}

type Recipe {
  id: ID!
  name: String!
  ingredients: [Ingredient!]!
  instructions: String
  author: User
}

input RecipeCreateConnectInput {
  id: ID
  name: String
}


input MealPlanCreateInput {
  startDate: DateTime!
  endDate: DateTime!
  user: ID
  group: ID
  mealDays: [MealDayCreateUpdateInput]
}

input MealPlanUpdateInput {
  id: ID!
  startDate: DateTime
  endDate: DateTime
  user: ID
  group: ID
  mealDays: [MealDayCreateUpdateInput]
  deletedMealDays: [ID!]
}

input MealDayCreateUpdateInput {
  id: ID
  recipe: RecipeCreateConnectInput
  date: DateTime!
}

type CalendarMealDay {
  mealPlanId: ID
  mealDay: MealDay
}

type CalendarMealDays {
  date: DateTime!
  mealDays: [CalendarMealDay]!
}
